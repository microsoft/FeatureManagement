{"version":3,"file":"validation.test.js","sourceRoot":"","sources":["../validation.test.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT license.\r\n\r\nimport * as fs from \"node:fs/promises\";\r\nimport * as chai from \"chai\";\r\nimport chaiAsPromised from \"chai-as-promised\";\r\n\r\nchai.use(chaiAsPromised);\r\nimport { FeatureManager, ConfigurationObjectFeatureFlagProvider } from \"@microsoft/feature-management\";\r\nconst expect = chai.expect;\r\n\r\nconst FILE_PATH = \"../../Samples/\"\r\nconst SAMPLE_JSON_KEY = \".sample.json\"\r\nconst TESTS_JSON_KEY = \".tests.json\"\r\n\r\ninterface IContext {\r\n    user?: string;\r\n    groups?: string[];\r\n}\r\n\r\ninterface IsEnabledResult {\r\n    Result?: string;\r\n    Exception?: string;\r\n}\r\n\r\ninterface FeatureFlagTest {\r\n    FeatureFlagName: string;\r\n    Inputs?: IContext;\r\n    IsEnabled?: IsEnabledResult;\r\n    Description?: string; \r\n}\r\n\r\nasync function runTest(testName: string) {\r\n    const config = JSON.parse(await fs.readFile(FILE_PATH + testName + SAMPLE_JSON_KEY, \"utf8\"));\r\n    const testcases: FeatureFlagTest[] = JSON.parse(await fs.readFile(FILE_PATH + testName + TESTS_JSON_KEY, \"utf8\"));\r\n    const ffProvider = new ConfigurationObjectFeatureFlagProvider(config);\r\n    const fm = new FeatureManager(ffProvider);\r\n\r\n    for (const testcase of testcases){\r\n        const featureFlagName = testcase.FeatureFlagName;\r\n        const context = { userId: testcase.Inputs?.user, groups: testcase.Inputs?.groups };\r\n\r\n        if (testcase.IsEnabled) {\r\n            if (testcase.IsEnabled.Exception !== undefined) {\r\n                try {\r\n                    await fm.isEnabled(featureFlagName, context);\r\n                    expect.fail(\"It should throw exception.\");\r\n                } \r\n                catch (error) {\r\n                    // TODO: Verify the error message after we unify it across libraries\r\n                    // expect(error.message).to.include(testcase.IsEnabled.Exception);\r\n                }\r\n            } \r\n            else {\r\n                expect(await fm.isEnabled(featureFlagName, context)).to.eq(testcase.IsEnabled.Result === \"true\");\r\n            }\r\n        }\r\n    }\r\n}   \r\n\r\ndescribe(\"feature manager\", function () {\r\n    it(\"should pass NoFilters test\", async () => {\r\n        await runTest(\"NoFilters\");\r\n    });\r\n\r\n    it(\"should pass RequirementType test\", async () => {\r\n        await runTest(\"RequirementType\");\r\n    });\r\n\r\n    it(\"should pass RequirementType test\", async () => {\r\n        await runTest(\"RequirementType\");\r\n    });\r\n\r\n    it(\"should pass TimeWindowFilter test\", async () => {\r\n        await runTest(\"TimeWindowFilter\");\r\n    });\r\n\r\n    it(\"should pass TargetingFilter test\", async () => {\r\n        await runTest(\"TargetingFilter\");\r\n    });\r\n\r\n    it(\"should pass TargetingFilter.modified test\", async () => {\r\n        await runTest(\"TargetingFilter.modified\");\r\n    });\r\n\r\n});"]}